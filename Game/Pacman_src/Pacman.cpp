#include "fantom.h"

Pacman::Pacman()
{
  int i = -1;

  this->x = 15;
  this->y = 18;
  this->score = 0;
  this->dir = LEFT;
  this->can_eat = false;
  this->t = 0;
  this->init_map();
  this->Fans = new Fantom *[5];
  srand(time(NULL));
  while (++i < 4)
    this->Fans[i] = new Fantom(i);
  this->speed = 90000;
}

Pacman::~Pacman()
{
}

void *Pacman::getLib()
{
  return (this->lib);
}

void		Pacman::init_map()
{
  this->map = new int* [31];
  for (int i=0; i < 31; i++)
    this->map[i] = new int[30];
  int map[50][50] =
{
             {4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 5, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 5, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0}, // MILIEU
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4},
             {4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 5, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 5, 4, 4},
             {4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4},
             {4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4},
             {4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4},
             {4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4},
             {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
  };
  for (int i=0; i < 31; i++)
    for (int j=0; j < 30; j++)
      this->map[i][j] = map[i][j];
}


int Pacman::put_pac()
{
  int indic = 0;

  if (map[this->y][this->x] == 5)
  {
    this->can_eat = true;
    this->t = time(NULL);
    indic = 1;
  }
  if (map[this->y][this->x] == 3)
    this->score += 50;
  if (map[this->y][this->x] == 5)
    this->score += 100;
  map[this->y][this->x] = 1;
  return (indic);
}

int Pacman::getScore()
{
  return (this->score);
}

int Pacman::check_collision()
{
  if (can_eat == false && map[this->y][this->x] == 8)
    return (-1);
  return (0);
}

int Pacman::check_end_map()
{
  for (int i=0; i < 31; i++)
    for (int j=0; j < 30; j++)
      {
        if (this->map[i][j] == 3 || this->map[i][j] == 5)
          return (0);
      }
    return (1);
}

int Pacman::check_move(t_orientation dir)
{
  time_t time_now;
  int i = -1;
  int inc;

  if (this->check_end_map() == 1)
    {
      this->speed -= 150000;
      if (this->speed <= 10000)
        this->speed = 15000;
      this->init_map();
    }
  time_now = time(NULL) - t;
  if (can_eat == true && (float)time_now >= 10)
    {
      t = 0;
      can_eat = false;
    }
  check_dir(map, dir);
  new_pos(map, -1);
  if (check_collision() == -1)
    return (-1);
  put_pac();
  while (++i < 4)
    {
      if ((inc = Fans[i]->check_and_move_fantom(map, can_eat, x, y)) == -1)
        return (-1);
      score += inc;
    }
  return (0);
}

board Pacman::get_board()
{
  board game;

  game.score = score;
  game.map = map;
  game.speed = speed;
  return (game);
}

extern "C" IGame *getObjPacman()
{
  return (new Pacman);
}
